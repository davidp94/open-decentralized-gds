msc {
  airline [label="Airline", linecolor="#008800", textbgcolor="#CCFFCC", arclinecolor="#008800"],
  analyst [label="Revenue Management Analyst", linecolor="#FF0000", textbgcolor="#FFCCCC", arclinecolor="#FF0000"],
  reporter [label="ATC Tower Reporter", linecolor="#0000FF", textbgcolor="#CCCCFF", arclinecolor="#0000FF"],
  buyer1 [label="Buyer1", linecolor="#FF00FF", textbgcolor="#FFCCFF", arclinecolor="#FF00FF"],
  buyer2 [label="Buyer2", linecolor="black", textbgcolor="#DDDDDD", arclinecolor="black"],
  btoken [label="BookToken Smart Contract ERC20", linecolor="orange", textbgcolor="#FFFFCC", arclinecolor="orange"],
  ltoken [label="LoyaltyToken Smart Contract ERC20", linecolor="#117700", textbgcolor="#00FF00", arclinecolor="#117700"],
  flight [label="FlightInventory", linecolor="purple", textbgcolor="violet", arclinecolor="purple"],
  flightseat1 [label="FlightSeat1", linecolor="grey", textbgcolor="white", arclinecolor="grey"],
  flightseat2 [label="FlightSeat2", linecolor="#008800", textbgcolor="#CCFFCC", arclinecolor="#008800"],
  revenue [label="RevenueManagement", linecolor="#FF0000", textbgcolor="#FFCCCC", arclinecolor="#FF0000"],
  ipfs [label="Decentralized file storage", linecolor="#0000FF", textbgcolor="#CCCCFF", arclinecolor="#0000FF"],
  checkin [label="CheckIn Counter App", linecolor="#FF00FF", textbgcolor="#FFCCFF", arclinecolor="#FF00FF"];

  airline note airline [label="Airline", linecolor="black", textbgcolor="#FFFFCC"],
  analyst note analyst [label="Set the prices for the flight seats", linecolor="black", textbgcolor="#FFFFCC"],
  reporter note reporter [label="Reports the actual departure/arrival times", linecolor="black", textbgcolor="#FFFFCC"],
  buyer1 note buyer1 [label="Buy ticket", linecolor="black", textbgcolor="#FFFFCC"],
  buyer2 note buyer2 [label="Second hand ticket", linecolor="black", textbgcolor="#FFFFCC"],
  btoken note btoken [label="Smart contract holding all the erc20 tokens - tradable token", linecolor="black", textbgcolor="#FFFFCC"],
  ltoken note ltoken [label="Smart contract holding all the erc20 tokens - tradable token", linecolor="black", textbgcolor="#FFFFCC"],
  flight note flight [label="FlightInventory Smart contract which will be deployed by the Airline - it manages and interacts with the other smart contracts (FlightSeat, RevenueManagement, Tokens)", linecolor="black", textbgcolor="#FFFFCC"],
  flightseat1 note flightseat1 [label="Flight Seat 1 of the Flight Inventory", linecolor="black", textbgcolor="#FFFFCC"],
  flightseat2 note flightseat2 [label="Flight Seat 2 of the Flight Inventory", linecolor="black", textbgcolor="#FFFFCC"],
  revenue note revenue [label="This smart contract holds the pricing of the flight seat - it is updated by the price analyst", linecolor="black", textbgcolor="#FFFFCC"],
  ipfs note ipfs [label="Decentralized file storage", linecolor="black", textbgcolor="#FFFFCC"],
  checkin note checkin [label="CheckIn Counter App", linecolor="black", textbgcolor="#FFFFCC"];
  --- [label="New Flight Deployment", linecolor="grey", textbgcolor="white"];
  airline => revenue [label="Deploy and initialize the Revenue Management System Contract"];
  revenue box revenue [label="Contract Address RMS_address = 0x....", linecolor="black", textbgcolor="white"];
  analyst => revenue [label="Can update the prices"];
  airline => flight [label="Deploy and initialize the Flight Inventory Smart Contract"];
  flight box flight [label="Contract Address FI_address = 0x....", linecolor="black", textbgcolor="white"];
  airline loop flightseat2 [label="for each seat", linecolor="grey", textbgcolor="white"] {
    airline box airline [label="Deploy a FlightSeat Smart Contract", linecolor="black", textbgcolor="white"];
    airline => flightseat1 [label="Deploy and initialize"];
    flightseat1 box flightseat1 [label="Contract Address FS1_address = 0x....", linecolor="black", textbgcolor="white"];
    airline => flight [label="addSeatContract(FS1_address)"];
    flight => flightseat1 [label="isBookable() ?"];
    flightseat1 => flight [label="True"];
    flight => flightseat1 [label="is from this flight() ?"];
    flightseat1 => flight [label="True"];
    flight >> buyer1 [label="Notify the flight seats availability in real time"],
    flight >> buyer2 [label="."];
  };
  --- [label="Buyer book", linecolor="grey", textbgcolor="white"];
  buyer1 box buyer1 [label="Buyer needs to have some BOOK tokens, it gets it from some decentralized exchanges like etherdelta", linecolor="black", textbgcolor="white"];
  buyer1 => flight [label="F_price = getPrice()"];
  flight => revenue [label="getPrice()"];
  revenue box revenue [label="get the price depending of remainingSeats...", linecolor="black", textbgcolor="white"];
  revenue => flight ,
  flight => buyer1 [label="F_price"];
  buyer1 => btoken [label="allow the FI_address contract to get the token from its balance : approve(FI_address, F_price)"];
  buyer1 => flight [label="book(seatIndex=1)"];
  flight => btoken [label="transferFrom(buyer1_address, airline_address, F_price)"];
  flight => flightseat1 [label="book(buyer1_address)"];
  flightseat1 box flightseat1 [label="booker = buyer1_address", linecolor="black", textbgcolor="white"];
  flight => ltoken [label="transferFrom(FI_address, buyer1_address, miles)"];
  --- [label="if FlightSeat is tradable, buyer can change the flightseat owner", linecolor="grey", textbgcolor="white"];
  buyer1 => flightseat1 [label="transfer(buyer2_address)"];
  flightseat1 box flightseat1 [label="booker = buyer2_address", linecolor="black", textbgcolor="white"];
  --- [label="checkin time", linecolor="grey", textbgcolor="white"];
  buyer2 box buyer2 [label="complete and fill a form serialized to a file enc_F which is then encrypted to the airline counter private key (privacy feature)", linecolor="black", textbgcolor="white"];
  buyer2 => ipfs [label="stores enc_F"];
  ipfs box ipfs [label="ipfs store the encrypted file", linecolor="black", textbgcolor="white"];
  buyer2 => flightseat1 [label="checkin(hash(enc_F))"];
  flightseat1 box flightseat1 [label="check that the checkin time is good -- interaction with FlightInventory", linecolor="black", textbgcolor="white"];
  --- [label="counter verification", linecolor="grey", textbgcolor="white"];
  buyer1 => buyer1 [label="generate signature that he is the booker + unencrypted checkin form"];
  buyer1 => checkin [label="show via NFC the boarding pass"];
  checkin box checkin [label="verify in real time in the blockchain", linecolor="black", textbgcolor="white"];
  checkin => flightseat1 [label="checkUser"];
  checkin => flightseat1 [label="getHashFile()"];
  flightseat1 => checkin [label="hash(enc_F)"];
  checkin <= ipfs [label="retrieves file enc_F"];
  checkin <= checkin [label="decrypt(enc_F)"];
  checkin box checkin [label="verify document and checkin things - done", linecolor="black", textbgcolor="white"];
  --- [label="loyalty/book tokens are tradable for any tokens (including book/loyalty tokens, ethers, usdt...) and could be used in airport store", linecolor="grey", textbgcolor="white"];
  --- [label="ATC reports actual arrival/departure time for insurance purpose - but there is no insurance smart contract yet.", linecolor="grey", textbgcolor="white"];
  reporter => flight [label="setActualDepartureTime(time)"];
  reporter => flight [label="setActualArrivalTime(time)"];
  flight note flight [label="now the information can be used by another smart contract which will do getTotalDelay() and gives back collateral to the user who subscribed for an external smart insurance smart conrtact", linecolor="black", textbgcolor="#FFFFCC"];
}